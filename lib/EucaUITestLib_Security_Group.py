from se34euca.lib.EucaUITestLib_Base import *

class EucaUITestLib_Security_Group(EucaUITestLib_Base):

    def test_ui_gotopage_security_groups(self):
	print "Started Test: GotoPage Security Groups"
        driver = self.driver
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "euca-logo"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: GotoPage Secutiry Groups"
            raise
	    return 1
        driver.find_element_by_id("euca-logo").click()
	print "Test: Received the Page Title -> " + driver.title
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "dashboard-netsec-sgroup"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: GotoPage Secutiry Groups"
            raise
	    return 1
        try: self.assertTrue(self.is_element_present(By.ID, "dashboard-netsec-sgroup"))
        except AssertionError as e: self.verificationErrors.append(str(e))
        driver.find_element_by_id("dashboard-netsec-sgroup").click()
	print "Test: Clicked the GoToPage Button"
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "table-sgroups-new"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: GotoPage Secutiry Groups"
            raise
	    return 1
        try: self.assertTrue(self.is_element_present(By.ID, "table-sgroups-new"))
        except AssertionError as e: self.verificationErrors.append(str(e))
	print "Finished Test: GotoPage Security Groups"
	print
	return 0

    def test_ui_create_security_group(self):
	print "Started Test: Create Security Group"
        driver = self.driver
        for i in range(self.retry):
            try:
                if self.is_element_present(By.LINK_TEXT, "Launch new instance"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Test: Go to the Page Security Group"
        driver.find_element_by_css_selector("#dashboard-netsec-sgroup > span").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "table-sgroups-new"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
        driver.find_element_by_id("table-sgroups-new").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-name"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Test: Create Security Group"
        driver.find_element_by_id("sgroup-name").clear()
        driver.find_element_by_id("sgroup-name").send_keys("mywebservice")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-description"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
        driver.find_element_by_id("sgroup-description").clear()
        driver.find_element_by_id("sgroup-description").send_keys("rules for my webservice. Generated by Selenium")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-template"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Click: LINK_TEXT -> Rules"
	driver.find_element_by_link_text("Rules").click()
	for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-template"): break
            except: pass
            time.sleep(1)
        else:
            print "Failed Test: Create Security Group"
            raise
            return 1
	print "Select: ID -> sgroup-templete, TEXT -> SSH (TCP port 22, for terminal access)"
        Select(driver.find_element_by_id("sgroup-template")).select_by_visible_text("SSH (TCP port 22, for terminal access)")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "allow-ip"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
        driver.find_element_by_id("allow-ip").clear()
        driver.find_element_by_id("allow-ip").send_keys("0.0.0.0/0")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-add-rule"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Click: ID -> sgroup-add-rule"
        driver.find_element_by_id("sgroup-add-rule").click()
	for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-rule-number-0"): break
            except: pass
            time.sleep(1)
        else:
            print "Failed Test: Create Security Group"
            raise
            return 1
	print "Rule 0: " + driver.find_element_by_css_selector("ul.sg-rules-list > li").text

        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-template"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Select: ID -> sgroup-templete, TEXT -> HTTP (TCP port 80, for web servers)"
        Select(driver.find_element_by_id("sgroup-template")).select_by_visible_text("HTTP (TCP port 80, for web servers)")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "allow-ip"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
        driver.find_element_by_id("allow-ip").clear()
        driver.find_element_by_id("allow-ip").send_keys("0.0.0.0/0")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-add-rule"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Click: ID -> sgroup-add-rule"
        driver.find_element_by_id("sgroup-add-rule").click()
	for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-rule-number-1"): break
            except: pass
            time.sleep(1)
        else:
            print "Failed Test: Create Security Group"
            raise
            return 1
	print "Rule 1: " + driver.find_element_by_xpath("//div[@id='sgroup-rules-list']/ul/li[2]").text

        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-template"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Select: ID -> sgroup-templete, TEXT -> Custom ICMP"
        Select(driver.find_element_by_id("sgroup-template")).select_by_visible_text("Custom ICMP")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-type"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Select: ID -> sgroup-type. TEXT -> All"
        Select(driver.find_element_by_id("sgroup-type")).select_by_visible_text("All")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "allow-ip"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
        driver.find_element_by_id("allow-ip").clear()
        driver.find_element_by_id("allow-ip").send_keys("0.0.0.0/0")
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-add-rule"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Click: ID -> sgroup-add-rule"
        driver.find_element_by_id("sgroup-add-rule").click()
	for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-rule-number-2"): break
            except: pass
            time.sleep(1)
        else:
            print "Failed Test: Create Security Group"
            raise
            return 1
	print "Rule 2: " + driver.find_element_by_xpath("//div[@id='sgroup-rules-list']/ul/li[3]").text

        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroup-add-btn"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Click: ID -> sgroup-add-btn"
	try:
            driver.find_element_by_id("sgroup-add-btn").click()
	except:
	    print "Failed Test: Create Security Group"
            raise
            return 1
	print "Finished: Create Security Group"
	print
	return 0

    def test_ui_delete_security_group(self):
	print "Started Test: Delete Security Group"
        driver = self.driver
        for i in range(self.retry):
            try:
                if self.is_element_present(By.LINK_TEXT, "Launch new instance"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group"
            raise
            return 1
	print "Test: Go to the Page Security Group"
        driver.find_element_by_css_selector("#dashboard-netsec-sgroup > span").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "table-sgroups-new"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group"
            raise
            return 1
        driver.find_element_by_css_selector("td.checkbox-cell.sorting_1 > input[type=\"checkbox\"]").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "more-actions-sgroups"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group"
            raise
            return 1
        driver.find_element_by_id("more-actions-sgroups").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.LINK_TEXT, "Delete"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group"
            raise
            return 1
	print "Test: Delete Security Group"
        driver.find_element_by_link_text("Delete").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "btn-sgroups-delete-delete"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group"
            raise
            return 1
	try:
            driver.find_element_by_id("btn-sgroups-delete-delete").click()
	except:
	    print "Failed Test: Delete Security Group"
            raise
            return 1
	print "Finished: Delete Security Group"
	print
	return 0

    def test_ui_delete_security_group_all(self):
	print "Started Test: Delete Security Group All"
        driver = self.driver
        for i in range(self.retry):
            try:
                if self.is_element_present(By.LINK_TEXT, "Launch new instance"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group All"
            raise
            return 1
	print "Test: Go to the Page Security Group"
        driver.find_element_by_css_selector("#dashboard-netsec-sgroup > span").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "sgroups-check-all"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group All"
            raise
            return 1
        driver.find_element_by_id("sgroups-check-all").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "more-actions-sgroups"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group All"
            raise
            return 1
        driver.find_element_by_id("more-actions-sgroups").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.LINK_TEXT, "Delete"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group All"
            raise
            return 1
	print "Test: Delete Security Group All"
        driver.find_element_by_link_text("Delete").click()
        for i in range(self.retry):
            try:
                if self.is_element_present(By.ID, "btn-sgroups-delete-delete"): break
            except: pass
            time.sleep(1)
        else:
	    print "Failed Test: Delete Security Group All"
            raise
            return 1
	try:
            driver.find_element_by_id("btn-sgroups-delete-delete").click()
	except:
	    print "Failed Test: Delete Security Group All"
            raise
            return 1
	print "Finished: Delete Security Group All"
	print
	return 0


if __name__ == "__main__":
    unittest.main()



